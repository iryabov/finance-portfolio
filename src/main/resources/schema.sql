CREATE TABLE IF NOT EXISTS public.account
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    active boolean NOT NULL DEFAULT true,
    name character varying NOT NULL,
    num character varying,
    CONSTRAINT account_pk PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.asset
(
    ticker character varying NOT NULL,
    name character varying,
    class character varying,
    sector character varying,
    country character varying,
    currency character varying,
    api character varying,
    price_now double precision,
    price_week double precision,
    price_month double precision,
    last_update date,
    CONSTRAINT asset_pkey PRIMARY KEY (ticker)
);

CREATE TABLE IF NOT EXISTS public.dial
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    active boolean NOT NULL DEFAULT true,
    dt date NOT NULL DEFAULT current_date,
    account_id integer NOT NULL,
    portfolio_id integer,
    ticker character varying NOT NULL,
    type character varying NOT NULL DEFAULT 'PURCHASE',
    currency character varying NOT NULL DEFAULT 'RUB',
    volume numeric NOT NULL,
    quantity integer NOT NULL,
    fee numeric DEFAULT 0,
    tax numeric DEFAULT 0,
    note character varying,
    CONSTRAINT asset_pk PRIMARY KEY (id),
    CONSTRAINT account_fkey FOREIGN KEY (account_id)
        REFERENCES public.account (id)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.writeoff
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    quantity integer NOT NULL,
    ticker character varying NOT NULL,
    dial_from bigint NOT NULL,
    dial_to bigint NOT NULL,
    CONSTRAINT writeoff_pkey PRIMARY KEY (id),
    CONSTRAINT dial_from_fk FOREIGN KEY (dial_from)
        REFERENCES public.dial (id)
        ON DELETE CASCADE,
    CONSTRAINT dial_to_fk FOREIGN KEY (dial_to)
        REFERENCES public.dial (id)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.rate
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    dt date NOT NULL DEFAULT current_date,
    currency_purchase character varying NOT NULL,
    currency_sale character varying NOT NULL,
    price numeric NOT NULL DEFAULT 0,
    CONSTRAINT rate_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.asset_history
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    ticker character varying NOT NULL,
    dt date NOT NULL,
    price numeric NOT NULL,
    CONSTRAINT asset_history_pkey PRIMARY KEY (id),
    CONSTRAINT ticker_fk FOREIGN KEY (ticker)
        REFERENCES public.asset (ticker)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.remittance
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    dial_from bigint NOT NULL,
    dial_to bigint NOT NULL,
    CONSTRAINT remittance_pkey PRIMARY KEY (id),
    CONSTRAINT dial_from_fkey FOREIGN KEY (dial_from)
        REFERENCES public.dial (id)
        ON DELETE CASCADE,
    CONSTRAINT dial_to_fkey FOREIGN KEY (dial_to)
        REFERENCES public.dial (id)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.portfolio
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    name character varying NOT NULL,
    note character varying,
    begin_date date,
    end_date date,
    CONSTRAINT portfolio_pk PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.target
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    active boolean NOT NULL DEFAULT true,
    portfolio_id integer,
    ticker character varying NOT NULL,
    type character varying NOT NULL DEFAULT 'ASSET',
    proportion numeric,
    take_profit numeric,
    stop_loss numeric,
    note character varying,
    CONSTRAINT target_pk PRIMARY KEY (id),
    CONSTRAINT portfolio_fkey FOREIGN KEY (portfolio_id)
        REFERENCES public.portfolio (id)
        ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION exchange(text, text, date) RETURNS numeric
AS $$
    SELECT CASE WHEN $2 = $1 THEN 1
           ELSE coalesce((SELECT r.price FROM rate r WHERE r.dt = $3 AND r.currency_purchase = $2 AND r.currency_sale = $1),
                         (SELECT r.price FROM rate r WHERE r.dt <= $3 AND r.currency_purchase = $2 AND r.currency_sale = $1 ORDER BY r.dt DESC LIMIT 1),
                         0)
           END
$$ LANGUAGE SQL;

CREATE INDEX IF NOT EXISTS deal_account_id ON dial(account_id);
CREATE INDEX IF NOT EXISTS deal_ticker ON dial(ticker);
CREATE INDEX IF NOT EXISTS deal_dt ON dial(dt);
CREATE INDEX IF NOT EXISTS asset_ticker ON asset(ticker);
CREATE INDEX IF NOT EXISTS asset_history_ticker ON asset_history(ticker);
CREATE INDEX IF NOT EXISTS asset_history_dt ON asset_history(dt);
CREATE INDEX IF NOT EXISTS target_ticker ON target(ticker);
CREATE INDEX IF NOT EXISTS target_type ON target(type);
CREATE INDEX IF NOT EXISTS target_portfolio_id ON target(portfolio_id);
CREATE INDEX IF NOT EXISTS rate_currency_purchase ON rate(currency_purchase);
CREATE INDEX IF NOT EXISTS rate_currency_sale ON rate(currency_sale);
CREATE INDEX IF NOT EXISTS rate_dt ON rate(dt);